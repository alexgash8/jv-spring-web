Spring MVC

    + Configure Spring MVC
    + and DB(in db.properties file). Adding Spring dependencies use the same version for each of them.
    + For this purpose you can use property spring.version.

    Create UserResponseDto with all fields of User in dto package.
    Also, you should add default constructor explicitly if you'll decide to create new ones.

    Create UserController in controller package where you should

        +! implement method GET: /users/inject which will create test data.
        Let's create three users in this method and save them to DB:
        firstName	lastName
        John	Doe
        Emily	Stone
        Hugh	Dane
        +! In response let's return the message Users are injected!

        method UserResponseDto get(Long userId), URL: GET: /users/{userId}.
        This method should return information about user by user id.

        method List<UserResponseDto> getAll, URL: GET: /users. This method should return information about all users from DB.

    Create a UserMapper in service package, where we're gonna perform all mapping to/from DTOs in order to stick with SRP.
    Use will use this mapper on the controller layer.

    Run tests with command mvn -DskipTests=false clean package.

    Remember about code-style.
    Don’t complicate get by id methods in your DAO, use session.get().

    Remember that we return Optional only from dao layer, not from service.
    Be attentive with session.get(), it can return null if data is absent.

    Method names are typically verbs or verb phrases. For example: get..., put..., create....
    Be careful with methods in class WebConfig.

    Better use @GetMapping instead of @RequestMapping(value = "/url", method = RequestMethod.GET) with methods.
    @GetMapping is newer and shorter annotation.

    It is a bad practice to use a URL with a type of operation.
    You should depend on the HTTP method type when implementing endpoints. Best Practices.

      Wrong:
         URL = "/get/{id}"

      Good:
         URL = "/{id}"

    You should return dto only in methods on the controller layer (don’t return it on service or dao layer).

    Create class UserResponseDto in separate package dto.
    Remember about id. Add this field to the response dto.

    Don’t pass User object in the constructor of UserResponseDto.

    Don’t create method mapFromDtoToEntity(...) in the mapper class.
    You should only create method that will map data from entity to dto.

    Use Stream API with UserController::getAll, for example, while mapping the users to dto objects to get a list of dtos.

    @GetMapping("/") is the same that @GetMapping.
    Use constructor injection instead of:

      private AnnotationConfigApplicationContext context =
              new AnnotationConfigApplicationContext(AppConfig.class);
      private UserService userService = context.getBean(UserService.class);

    Don’t push jsp file, jsp dependencies, hello controller and InternalResourceViewResolver resolver() bean to PR.
    Run checkstyle and fix code style issues.
